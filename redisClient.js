import Redis from "ioredis";
import logger from "./utils/logger.js";
import dotenv from "dotenv";
dotenv.config();

const redis = new Redis(process.env.REDIS_URL, {
  lazyConnect: true, // ‡πÑ‡∏°‡πà connect ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
  maxRetriesPerRequest: null,
  enableReadyCheck: false,
  reconnectOnError: err => err.message.includes("ECONNRESET"),
  retryStrategy: times => {
    // retry ‡πÅ‡∏ö‡∏ö exponential backoff
    return Math.min(50 * 2 ** times, 5000); // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  },
  keepAlive: 30000,
});

redis.on("connect", () => {
  console.log("üîç Redis connected");
  logger.debug("Redis connected");
});

redis.on("error", (err) => {
  console.error("üî• Redis error", err);
  logger.debug("Redis error", err);
});

redis.on("reconnecting", (time) => {
  console.log(`‚ôªÔ∏è Redis reconnecting in ${time}ms`);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
export async function connectRedis() {
  try {
    await redis.connect();
    console.log("‚úÖ Redis fully connected");
  } catch (err) {
    console.error("‚ùå Redis failed to connect", err);
    setTimeout(connectRedis, 1000); // retry ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
  }
}

export default redis;