import jwt from "jsonwebtoken";
import LogModel from "../models/Log.js";
import { User} from 
"../models/User.js"
import TokenModel from 
"../models/Token.js"
import logger from "../utils/logger.js"
import redis from "../redisClient.js"
import chalk from "chalk"
export const startMode = (req, res, next) => {
  if (process.env.NODE_ENV === "development"){
    console.log(chalk.green.bold("‚öôÔ∏èüöÄ Development Mode"))
    const cookieHeader = req.headers["Cookie"];
        if (cookieHeader) {
          // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ cookieHeader = "accessToken=xxx; something=yyy"
          const cookies = Object.fromEntries(
            cookieHeader.split(";").map(c => {
              const [k, v] = c.trim().split("=");
              return [k, v];
            })
          );
         token = req.devToken = cookies.accessToken;
          console.log( cookieHeader,req.devToken, token)
          next();
        }
      } 
  next();
      }
    
export const checkHeaderDebug = (req, res, next) => {
  const debugHeader = req.headers['x-debug']
  logger.setDebug(debugHeader === 'true')
  next()
}
const findUserByToken = async (token) => {
  const decoded = jwt.verify(token, process.env.JWT_LOGIN_SECRET)
  const user = await User.findById(decoded.id).lean().select("-password")
  return user
}
export const adminCheck = async (req, res, next) => {
  // ‡πÄ‡∏ä‡πá‡∏Å user ‡πÉ‡∏ô token ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "admin"
  const token = req.token || req.cookies.accessToken
  try {
    const user = await findUserByToken(token)
    if (user.role !== "admin") {
      console.debug("adminCheck : ", user)
      return res.status(403).json({ 
        success: false,
        statusCode: 403,
        code: 'ADMIN_ONLY',
        message: "Admin only access" });
    }
    req.user = user
    next();
  } catch ( err) {
    logger.debug("adminCheck Error: ", err)
    res.status(401).json({ 
      success: false,
      statusCode: 401,
      code: 'INVALID_TOKEN',
      message: "Invalid token" });
  }
  
};

export const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Invalid authorization header" });
  }

  const token = authHeader.split(" ")[1];
  
  if (!token) return res.status(401).json({ error: "No token provided" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // ‡πÄ‡∏Å‡πá‡∏ö user ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÉ‡∏ô route

    // ‚úÖ Log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const log = new LogModel({
      user: decoded.user,
      action: req.method + " " + req.originalUrl,
      ip: req.ip,
      tokenId: decoded.jti || null
    });
    await log.save();

    next();
  } catch (err) {
    return res.status(403).json({ error: err });
  }
};
const checkToken = async (req) => {
  let token;

  if (process.env.NODE_ENV === "development") {
    // Dev: ‡∏≠‡πà‡∏≤‡∏ô token ‡∏à‡∏≤‡∏Å header cookie (Swagger ‡∏™‡πà‡∏á‡∏°‡∏≤)
    const cookieHeader = req.headers["x-access-token"];
    
    if (cookieHeader) {
      
      token = cookieHeader;
    }
  } else {
    // Prod: ‡πÉ‡∏ä‡πâ cookie-parser ‡∏õ‡∏Å‡∏ï‡∏¥
    token = req.cookies?.accessToken;
  }
  return token
}
// ‡∏ï‡∏£‡∏ß‡∏à login token ‡∏à‡∏≤‡∏Å cookie
export const authFromCookie = async (req, res, next) => {
  const token = await checkToken(req)

  
    // Dev: ‡∏≠‡πà‡∏≤‡∏ô token ‡∏à‡∏≤‡∏Å header cookie (Swagger ‡∏™‡πà‡∏á‡∏°‡∏≤)
    

  if (!token) {
    logger.console('ERROR','No token provided')
    return res.status(401).json({ 
      success: false,
      statusCode: 401,
      code: 'NO_TOKEN',
      message: "No token provided"
    });
  }

  try {
    const user = await findUserByToken(token);
    req.user = user;
    req.token = token;
    next();
  } catch (err) {
    logger.log("Check Cookie Error: ", err)
    return res.status(403).json({ 
      success: false,
      statusCode: 403,
      code: 'INVALID_TOKEN',
      message: "Invalid or expired token"
    });
  }
};

// Middleware: checkLogin
export const checkLogin = async (req, res, next) => {
  const accessToken = req.token || req.cookies?.accessToken;

  if (!accessToken) {
    logger.console('error',"checkLogin error")
    return res.status(401).json({
      success: false,
      statusCode: 401,
      code: 'NO_TOKEN',
      message: "No token provided"
    });
  }

  try {
    const decoded = jwt.verify(accessToken, process.env.JWT_LOGIN_SECRET);
    const userId = decoded.id;

    const savedToken = await redis.get(`session:${userId}`);

    if (savedToken !== accessToken) {
      return res.status(403).json({ 
        success: false,
        statusCode: 403,
        code: 'SESSION_EXPIRED',
        message: "Session expired or logged in elsewhere"
      });
    }

    // attach user (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á findUserByToken ‡∏ã‡πâ‡∏≥‡∏ñ‡πâ‡∏≤ authFromCookie attach ‡πÅ‡∏•‡πâ‡∏ß)
    req.user = req.user || await findUserByToken(accessToken);

    next();
  } catch (err) {
    return res.status(403).json({
      success: false,
      statusCode: 403,
      code: 'INVALID_TOKEN',
      message: "Invalid or expired token"
    });
  }
};
// Middleware: preventAccessIfLoggedIn
export const preventAccessIfLoggedIn = async (req, res, next) => {
  const token = await checkToken(req)
    const accessToken = req.cookies.accessToken || token
  
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ accessToken ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    if (!accessToken) {
        return next();
    }

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á accessToken
        const decoded = jwt.verify(accessToken, process.env.JWT_LOGIN_SECRET);
        const userId = decoded.id;

        const savedToken = await redis.get(`session:${userId}`);

        // ‡∏ñ‡πâ‡∏≤ Session ‡πÉ‡∏ô Redis ‡∏¢‡∏±‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö accessToken ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        // ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (savedToken === accessToken) {
          req.token = accessToken
            return res.status(400).json({
                success: false,
                statusCode: 400,
                code: 'ALREADY_LOGGED_IN',
                message: 'You are already logged in'
            });
        }

        // ‡∏ñ‡πâ‡∏≤ Session ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ
        next();

    } catch (err) {
        // ‡∏ñ‡πâ‡∏≤ accessToken ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ
        next();
    }
};

function isBase64Url(apiToken) {
  const base64UrlRegex = /^[A-Za-z0-9-_]+$/
  return base64UrlRegex.test(apiToken)
   
}
// ‡∏ï‡∏£‡∏ß‡∏à Bearer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
export const authFromBearer = async (req, res, next) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader?.startsWith("Bearer ")) {
    return res.status(401).json({ 
      error: {
      statusCode: 401,
      code: 'BEARER_REQUIRED',
      message: "Bearer token required in Authorization header (Authorization: Bearer <apiToken>)"
      } });
  }
  const apiToken = authHeader.split(" ")[1];
  // ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏™‡πà‡∏á headers ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 
  //ex Bearer Bearer <token>
  //ex Bearer <token> Bearer
  if (!isBase64Url(apiToken)) return res.status(401).json({ error: "Invalid Bearer Token format: Bearer <token>"})
  try {
  
    const tokenDoc = await TokenModel.findOne({ apiToken }).lean()
  if (!tokenDoc) return res.status(403).json({ error: "Invalid token" });
  if (tokenDoc.expiresAt < new Date())
    return res.status(403).json({ error: "Token expired" });
    let decoded;
    try {
      decoded = jwt.verify(tokenDoc.refreshToken, process.env.JWT_SECRET);
    } catch (err){
      
      logger.debug("authFromBearer JWT Error:", err)
      return res.status(403).json({ error: "Invalid token signature" });
}
    
   const dataUser = await User.findById(decoded.id).lean();
    if (!dataUser) return res.status(403).json({ error: "Invalid token user" });
    if (dataUser.username !== tokenDoc.user) return res.status(403).json({ error: "Token user mismatch" });

    req.user = dataUser
    next();

  } catch (err) {
    logger.debug("authFromBearer Error:", err);
    res.status(500).json({ error: "Internal server error" });
  }
};

export const logMiddleware = async (req, res, next) => {
  const start = process.hrtime(); // precise timer
  const user = req.user?.username || "anonymous";
  const ip = req.ip || req.headers['x-forwarded-for'] || req.connection.remoteAddress;

  // ‡∏ó‡∏≥‡∏´‡∏•‡∏±‡∏á response ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  res.on('finish', async () => {
    const [seconds, nanoseconds] = process.hrtime(start);
    const responseTime = (seconds * 1e3 + nanoseconds / 1e6).toFixed(2); // ms

    const logData = {
      user,
      action: `${req.method} ${req.originalUrl}`,
      ip,
      tokenId: req.user?.jti || undefined,
      endpoint: req.originalUrl,
      method: req.method,
      statusCode: res.statusCode,
      responseTime: parseFloat(responseTime),
    };

    try {
      await LogModel.create(logData);
    } catch (err) {
      console.error("Failed to save log:", err);
    }
  });

  next();
};